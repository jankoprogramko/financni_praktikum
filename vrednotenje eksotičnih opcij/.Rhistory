l <- list("ata", 6772, TRUE, "MAMA")
l
l[[2]]
l[[4]]
as.character(l)
l
is.numeric(l[[2]])
ischaracter(l[[4]])
is.character(l[[4]])
is.logical(l[[3]])
is.logical(l[[4]])
names(l) <- c("starš1","število", "logika", "starš2")
names(l)
l
l[[2]]
l[[število]]
l[["število"]]
l$starš1
l$število
crneti <- data.frame(ime=c("stane","ivi","tim","jan"),starost=c(50,40,15,22))
crneti
crneti[[2]]
crneti[1]
crneti(1)
crneti[2]
crneti[2,2]
crneti[1,1]
colnames(crneti)
rownames(crneti)
rownames(crneti) <- c(oce,mama,sin1,sin2)
rownames(crneti) <- c("oce","mama","sin1","sin2")
crneti
row.names(crneti) <- c("oce","mama","sin1","sin2")
crneti
crneti[c(1,1)]
crneti
levels(crneti)
crneti[2,2]
{a = 2; b = a/0.5; c = a+b^2}
{a = 2; b = a/0.5; a+b^2; c = a+b}
{a = 2; b = a/0.5; a+b^2; c = a+b}
{a = 2; b = a/0.5; a+b^2; a+b}
if (a > 3) print(a) else a <- a+1
if (a > 3) print(a) else a <- a+1
if (a > 3) print(a) else a <- a+1
if (a > 6) print(a) else a <- a+1 print("še kar je manjši")
if (a > 6) print(a) else {a <- a+1; print("še kar je manjši")}
if (a > 6) print(a) else {a <- a+1; print("še kar je manjši")}
if (a > 6) print(a) else {a <- a+1; print("še kar je manjši")}
if (a > 6) print(a) else {a <- a+1; print("še kar je manjši")}
if (a < 10) {a <- a + 1; a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 10) {a <- a + 1; a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 10) {a <- a + 1; a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 10) {a <- a + 1; a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 13) {a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 13) {a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 13) {a <- a + 1; print("Morda pa je zdaj čez tri ...")}
if (a < 13) {a <- a + 1; print("Morda pa je zdaj čez tri ...")}
a=1
while (a != 6) {}
while (a != 6) {}
while (a != 6) {a = a +1; print("ni 6 je pa"); print(a)}
while (a != 10) {a = a +1; print("ni 10 je pa"); print(a)} else print("sedaj je 10")
getwd()
f <- function(a,b) {abs(a^2 - b^2)}
f(3,9)
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3) {print(niz2)} break}}
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3) print(niz2) break}}
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3)   break}}
g("janez","martin",1)
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3)   print(niz2)}}
g("janez","martin",1)
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3)   print(niz2)}}
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3)   print(niz2) break}}
g <- function(niz1, niz2, st) {repeat {print(niz1);st = st +1;if (st == 3)   print(niz2); break}}
g("janez","martin",1)
View(g)
i=0
repeat {print(i); i <- i + 1; if (i > 2) break}
repeat {print(i); i <- i + 1; if (i > 2) print("kul") break}
k=0
if (k<3) {print("povečujemo"); k = k+1} else print(k)
f <- function(k) {if (k<3) {print("povečujemo"); k = k+1} else f(k)}
rm(k)
f(0)
f <- function(k) {if (k<3) {print("povečujemo"); k = k+1; f(k)} else f(k)}
f(0)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
git config --global user.email "jan.chrne@gmail.com"
git config --global user.email "jan.chrne@gmail.com"
git config --global user.name "Jan Črne"
git config --global user.email "jan.chrne@gmail.com"
git config--global user.email "jan.chrne@gmail.com"
gitconfig--global user.email "jan.chrne@gmail.com"
git config --global user.email "jan.chrne@gmail.com"
git config --global user.name "Jan Črne"
git config --global user.name "Jan Crne"
git config --global user.name "Jan Crne"
git config --global user.name "Jan Črne"
git config --global user.email "jan.chrne@gmail.com"
/etc/gitconfig
etc/gitconfig
gitconfig
gitconfig --global user.email "jan.chrne@gmail.com"
gitconfig --global user.email "jan.chrne@gmail.com"
git config --global user.email "jan.chrne@gmail.com"
git config --global user.email "jan.chrne@gmail.com"
git config --global user.name "HP"
180*radiani/pi
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/funkcije.r')
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/funkcije.r')
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/funkcije.r')
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/funkcije.r')
help paste
paste
help("paste")
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/funkcije.r')
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/krmilni_stavki.r')
seq(50,10,10)
seq(50,10,-10)
1:4^2
mean(c(4, 3, 2, 4, 3, 3, 5))
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/osnovni_gradniki_vektorjev.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/osnovni_gradniki_vektorjev.r', encoding = 'UTF-8')
y <- c(3, 7, 1, 5, 9)
oreder(y)
order(y)
y[order(y)]
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/indeksi.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/indeksi.r', encoding = 'UTF-8')
opisne.ocene <- c("manj uspešno", "uspešno", "zelo uspešno")
telovadba <- c("manj uspešno", "zelo uspešno", "uspešno", "uspešno")
Telovadba <- factor(telovadba, levels=opisne.ocene, ordered=TRUE)
opisne.ocene
telovadba
Telovadba
help("factor")
matematika <- c(4, 2, 5, 3)
names(matematika) <- c("Janez", "Micka", "Lojzka", "Franci")
Sola <- data.frame(matematika, sportna.vzgoja=Telovadba)
Sola
Telovadba
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/imena_in_razpredelnice.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/imena_in_razpredelnice.r', encoding = 'UTF-8')
kategorije <- c("majhen otok", "velik otok", "celina")
velikosti <- character(length(otoki))
velikosti
velikosti[otoki > 5000] <- "celina"
velikosti[otoki >= 100 & otoki <= 5000] <- "velik otok"
velikosti[otoki < 100] <- "majhen otok"
Velikosti <- factor(velikosti, levels=kategorije, ordered=TRUE)
Otoki <- data.frame(kvadratni.kilometri=round(otoki),
kvadratne.milje=islands,
kategorija=Velikosti)
Otoki
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/imena_in_razpredelnice.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/osnovno programiranje/krmilni_stavki.r', encoding = 'UTF-8')
View(fibonacci)
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/uporaba_funkcij_na_vektorjih_in_razpredelnicah.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/vektorji in razpredelnice/uporaba_funkcij_na_vektorjih_in_razpredelnicah.r', encoding = 'UTF-8')
help("cat")
for (x in 1:10) {}
for (x in 1:10) {cat(x,"\n")}
for (x in 1:10) {cat(x)}
help("runif")
for (x in 1:10) {cat("x\n")}
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov/zanka_for.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov/branje_in_obdelava_podatkov.r', encoding = 'UTF-8')
View(M)
View(Z)
View(imena.moski)
View(imena.zenske)
help("parse_interger")
??parse_interger
"??parse_interger"
setwd("~/")
View(imena)
filter(imena, ime == "Bojan")
imena %>% filter(leto == 2013, spol == "zenske", stevilo <= 5)
imena %>% filter(leto == 2013, spol == "zenske", stevilo <= 5) %>%  select(ime, stevilo)
imena %>% group_by(leto, spol)
imena
View(imena)
imena %>% group_by(leto, spol) %>% summarise(prebivalstvo=sum(stevilo))
imena %>% filter(leto == 2019) %>% group_by(ime) %>% summarise(stevilo=sum(stevilo)) %>% arrange(desc(stevilo)) %>% head(20)
imena %>% filter(leto == 2019) %>% group_by(ime)
imena2 <- imena %>% filter(leto == 2019) %>% group_by(ime)
View(imena2)
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov/branje_in_obdelava_podatkov.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov/branje_in_obdelava_podatkov.r', encoding = 'UTF-8')
paste("10 = 1", 1:8, 8:1, sep="+")
cat("S", "cat", "izpišemo", "zlepljen", "niz.")
substr("abcčdefgh", 3, 5)
??substr
help("substr")
strsplit("Tale niz bomo razbili na besede.", split=" ", fixed=TRUE)
unlist(strsplit("Tale niz bomo razbili na besede.", split=" ", fixed=TRUE))
paste(1:10, collapse=",")
paste(1:10)
gsub("[aeiou]", "", "Ostali smo brez samoglasnikov!", ignore.case=TRUE)
gsub("[aeiou]", "", "Ostali smo brez samoglasnikov!")
gsub("[aeiou]", "", "Ostali smo brez samoglasnikov!", ignore.case=TRUE)
help("gsub")
gsub("[aeiou]", "", "Ostali smo brez samoglasnikov!", ignore.case=TRUE)
help("gsub")
d <- dir()
d
z <- grep("\\.csv$", d)
z
d[z]
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/obdelava_nizov.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/obdelava_nizov.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/uvoz_podatkov_s_spletnih_strani.r', encoding = 'UTF-8')
link <- "http://sl.wikipedia.org/wiki/Seznam_ob%C4%8Din_v_Sloveniji"
stran <- html_session(link) %>% read_html()
library(rvest)
library(gsubfn)
library(readr)
library(dplyr)
options(gsubfn.engine="R")
stran <- html_session(link) %>% read_html()
View(stran)
tabela <- stran %>% html_nodes(xpath="//table[@class='wikitable sortable']") %>% .[[1]] %>% html_table(dec=",")
View(tabela)
summary(tabela)
colnames(tabela) <- c("obcina", "povrsina", "prebivalci", "gostota", "naselja","ustanovitev", "pokrajina", "regija", "odcepitev")
sl <- locale("sl", decimal_mark=",", grouping_mark=".")for (col in c("prebivalci", "naselja", "ustanovitev")) {
#       tabela[[col]] <- parse_number(tabela[[col]], na="-", locale=sl)
#     }
sl <- locale("sl", decimal_mark=",", grouping_mark=".")for (col in c("prebivalci", "naselja", "ustanovitev")){tabela[[col]] <- parse_number(tabela[[col]], na="-", locale=sl)}
sl <- locale("sl", decimal_mark=",", grouping_mark=".")
View(sl)
View(sl)
for (col in c("prebivalci", "naselja", "ustanovitev")) {tabela[[col]] <- parse_number(tabela[[col]], na="-", locale=sl)}
summary(tabela)
help("strapply")
help("lapply")
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/uvoz_podatkov_s_spletnih_strani.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/uvoz_podatkov_s_spletnih_strani.r', encoding = 'UTF-8')
source('C:/Users/HP/Desktop/APPR_vaje/branje podatkov iz spletnih strani/obdelava_nizov.r', encoding = 'UTF-8')
install.packages("combinat")
install.packages("Rlab")
setwd("~/FP_3.naloga")
library(combinat)
library(Rlab)
p1 <- c(50.00, 52.50, 49.88, 52.37, 49.75, 52.24)
p2 <- c(50.00, 52.50, 55.12, 57.88, 60.78, 63.81)
p3 <- c(50.00, 47.50, 49.88, 47.38, 45.01, 42.76)
p4 <- c(50.00, 47.50, 45.12, 47.38, 49.75, 52.24)
p5 <- c(50.00, 52.50, 49.88, 52.37, 54.99, 57.74)
izplacilo <- function(vrsta, T, type = c("put", "call")) {
if (type == 'put')
return(max(-min(vrsta[1:T]) +  min(vrsta[(T+1):length(vrsta)]), 0))   #prodajlni tip
if (type == 'call')
return(max(-max(vrsta[1:T]) +  max(vrsta[(T+1):length(vrsta)]), 0))   #nakupni tip
}
print(paste(round(izplacilo(c(50,52.5,49.88,52.37,49.75,52.24),3,"call"),2) == 0))
print(paste(round(izplacilo(c(50,52.5,55.12,57.88,60.78,63.81),3,"put"),2) == 7.88))
print(paste(round(izplacilo(c(50,52.5,55.12,57.88,60.78,63.81),3,"call"),2) == 8.69))
print(paste(round(izplacilo(c(60,61.2,59.98,58.78,57.6,58.75,57.58),5,"put"),2) == 0))
print(paste(round(izplacilo(c(60,58.8,57.62,58.78,59.95,61.15,62.37),4,"call"),2) == 2.37))
print(paste(round(izplacilo(c(70,66.5,69.83,73.32,76.98,73.13,69.48),2,"put"),2) == 2.98))
hcube(rep(2, U), translation = -1)
hcube(rep(2, 5), translation = -1)
U=5
R=0.03
u=1.05
d=0.95
q = (1+R-d)/(u-d)
hipk <- hcube(rep(2, U), translation = -1)
View(hipk)
Q <- q^rowSums(hipk) * (1-q)^(U - rowSums(hipk))
u^(hipk) * d^(1-hipk)
cbind(rep(S0, 2^U), u^(hipk) * d^(1-hipk))
S0=50
cbind(rep(S0, 2^U), u^(hipk) * d^(1-hipk))
Q <- q^rowSums(hipk) * (1-q)^(U - rowSums(hipk))
Q
matrika <- cbind(rep(S0, 2^U), u^(hipk) * d^(1-hipk))
matrika
apply(matrika, 1, cumprod)
prod <- t(apply(matrika, 1, cumprod))
View(prod)
izplacila <- apply(prod, 1, izplacilo, T=T, type=type)
type="call"
izplacila <- apply(prod, 1, izplacilo, T=T, type=type)
izplacila
binomski <- function(S0, u, d, U, R, T, type){
q = (1+R-d)/(u-d)  #verjetnost
hipk <- hcube(rep(2, U), translation = -1) #hiperkocka
Q <- q^rowSums(hipk) * (1-q)^(U - rowSums(hipk))   #matrika verjetnosti s katerimi pomnožimo cene,
#koeficienti izračunane glede na število dobrih oz. slabih
#razvojev trga, glede na to koliko v v hiperkocki enk, toliko je
#dobrih razvojev
matrika <- cbind(rep(S0, 2^U), u^(hipk) * d^(1-hipk))   #matrika koeficientov s katerimi pomnožimo cene v obdobjih glede na št. dobrih
#razvojev
#cbind doda še stolpec z začetno ceno
#matrika <- cbind(rep(S0, 2^U), matrika)   #dodamo vektor z začetno ceno
prod <- t(apply(matrika, 1, cumprod)) #matrika z cenami delnice v različnih obdobjih
izplacila <- apply(prod, 1, izplacilo, T=T, type=type)  #vektor izplačil, če za izračun uporabimo ekstrmni razkorak
premija <- sum(Q*izplacila)/(1 + R)^U #izračun premije glede na izplačila ob zapadlosti in verjetnosti da smo v
#določenem stanju
return(premija)
}
print(paste(c(binomski(50,1.05,0.95,5,0.03,3,"call"), 4.463501)))
print(paste(c(binomski(50, 1.05, 0.9 , 10, 0.03, 5, "call"), 8.626511)))
rbinom(U, 1, q)
monte <- function(S0, u, d, U, R, T, type, N){
q = (1 + R - d) / (u - d)
for (i in 1:N){    #naredimo N simulacij poti
if (i == 1){
mat <- rbinom(U, 1, q)   #glede na binomsko porazdelitev zgenerira naključno vrstico poljubno velike hiperkocke
#pri i=1 ustvari prvo vrstico matrike
}
else{
mat <- rbind(mat, rbinom(U, 1, q))    #ustvarimo naključno matriko, podobna obliki hiperkocke, le drugačen
#vrstni red vrstic
}
}
matrika <- cbind(rep(S0, 2^U), u^(mat) * d^(1-mat))
#matrika <- cbind(rep(S0, 2^U), matrika)
prod <- t(apply(matrika, 1, cumprod))
izplacila <- apply(prod, 1, izplacilo, T=T, type=type)
premija <- sum(izplacila) / (N * (1 + R)^U)
return(premija)
}
S0=60
u=1.05
d=0.95
U=15
R=0.01
T=8
N1=10
N2=100
N3=1000
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon1 <- monte(S0,u,d,U,R,T,'put',N1)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon3 <- monte(S0,u,d,U,R,T,'put',N3)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
mon2 <- monte(S0,u,d,U,R,T,'put',N2)
print(paste(c(monte(70, 1.05, 1   ,  7,    0, 5, "put",2000),0)))
print(paste(c(monte(70, 1.05, 1   ,  7,    0, 5, "put",2000),0)))
print(paste(c(monte(70, 1.05, 1   ,  7,    0, 5, "put",2000),0)))
print(paste(c(monte(50,1.05,0.9,10,0.03,5,"call",100),8.832116)))
print(paste(c(monte(50,1.05,0.9,10,0.03,5,"call",100),8.832116)))
print(paste(c(monte(50,1.05,0.9,10,0.03,5,"call",100),8.832116)))
print(paste(c(monte(50,1.05,0.9,10,0.03,5,"call",100),8.832116)))
print(paste(c(monte(50,1.05,0.9,10,0.03,5,"call",100),8.832116)))
print(paste(c(monte(90, 1.15, 0.8 , 10, 0.01, 3, "call",50000),28.0376)))
numeric(3)
?numeric
MonteCarlo <- function(S0, u, d, U, R, T, type, N, M){
sim_premije = numeric(M)
#sim_premije = 1:M
for (i in 1:M){
#k=monte(S0,u,d,U,R,T,type,N)
sim_premije[i] = monte(S0,u,d,U,R,T,type,N)
}
return(sim_premije)
}
View(MonteCarlo)
MonteCarlo(S0, u, d, U, R, T, type, N1, 10)
MonteCarlo(S0, u, d, U, R, T, type, N1, 100)
MonteCarlo(S0, u, d, U, R, T, type, N1, 1000)
(S0, u, d, U, R, T, type, N, M)
print(paste(c(monte(90, 1.15, 0.8 , 10, 0.01, 3, "call",50000),28.0376)))
MonteCarlo(90, 1.15, 0.8 , 10, 0.01, 3, "call",50000,3)
MCM <- MonteCarlo(S0,u,d,U,R,T,'put',N1,100)
povprečje_MCM <- mean(MCM)  #povprečna vrednost
st_odk_MCM <- sd(MCM)  #standardni odklon
MCM
MCM <- MonteCarlo(S0,u,d,U,R,T,'put',N1,100)
povprečje_MCM <- mean(MCM)  #povprečna vrednost
st_odk_MCM <- sd(MCM)  #standardni odklon
MCM
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N=10", xlab = "Premija", ylab = "Frekvenca")
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 10", xlab = "Premija", ylab = "Frekvenca")
?abline
abline(v = povprečje_MCM,
col = "green", lty = 1, lwd = 2)
abline(v = povprečje_MCM,
col = "green", lwd = 2)
abline(v = povprečje_MCM,
col = "green", lw = 2)
?lw
??lw
?plot
abline(v = povprečje_MCM,
col = "green")
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 10", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM,
col = "green")   #
abline(v=binomski(S0,u,d,U,R,T,'put'),
col = "red")
abline(v = povprečje_MCM,
col = "green", lwd = 3)
abline(v=binomski(S0,u,d,U,R,T,'put'),
col = "red", lwd = 3)
?arrows
arrows(x0 = povprečje_MCM, y0 = 0, x1 = povprečje_MCM + st_odk_MCM, y1 = 0, col = "green", lwd=2, length = 0.1)    #puščica iz (povp,0) do (povp1 + st_odk1,0)
arrows(povprečje_MCM, 0, povprečje_MCM - st_odk_MCM, 0, col = "green", lwd=2, length = 0.1)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lyt = 2)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 2)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 3)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3)
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 10", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM,
col = "green", lwd = 3)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3)
arrows(x0 = povprečje_MCM, y0 = 0, x1 = povprečje_MCM + st_odk_MCM, y1 = 0, col = "green", lwd = 2)
arrows(povprečje_MCM, 0, povprečje_MCM - st_odk_MCM, 0, col = "green", lwd = 2)
legend("topright", c("Monte Carlo","analiza modela"),col = c("green","red"),
lwd = c(2, 2), lty = c(1, 3), box.lty = 0)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 3)
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 3)
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 10", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM,
col = "green", lwd = 3)   #
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 3)
arrows(x0 = povprečje_MCM, y0 = 0, x1 = povprečje_MCM + st_odk_MCM, y1 = 0,
col = "green", lwd = 2)#, length = 0.1)
arrows(povprečje_MCM, 0, povprečje_MCM - st_odk_MCM, 0,
col = "green", lwd = 2)#,length = 0.1)
legend("topright", c("Monte Carlo","analiza modela"),col = c("green","red"),
lwd = c(2, 2), lty = c(1, 3), box.lty = 0)
MCM <- MonteCarlo(S0,u, d, U, R, T, "put", N1, 100)
povprečje_MCM <- mean(MCM)  #povprečna vrednost
st_odk_MCM <- sd(MCM)  #standardni odklon
hist(MCM, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 10", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM,
col = "green", lwd = 3)   #navpičnica, ki prikazuje povprečno vrednost Monte Carlo metode
abline(v = binomski(S0, u, d, U, R, T, "put"),
col = "red", lwd = 3, lty = 3)   #navpičnica, ki prikazuje teoretično oceno premije, brez generiranja binomsko
#porazdeljenih ravojev trga
#puščici, ki prikazujeta standardni odklon
arrows(x0 = povprečje_MCM, y0 = 0, x1 = povprečje_MCM + st_odk_MCM, y1 = 0,
col = "green", lwd = 2)
arrows(povprečje_MCM, 0, povprečje_MCM - st_odk_MCM, 0,
col = "green", lwd = 2)
legend("topright", c("Monte Carlo","analiza modela"), col = c("green", "red"),
lwd = c(2, 2), lty = c(1, 3))
MCM2 <- MonteCarlo(S0, u, d, U, R, T, 'put', N2, 100)
povprečje_MCM2 <- mean(MCM2)
st_odk_MCM2 <- sd(MCM2)
hist(MCM2, breaks=20, xlim = c(0, 10),
main = "Monte Carlo : N = 100", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM2, col = "green", lwd = 3)
abline(v = binomski(S0, u, d, U, R, T, "put") , col = "red", lty = 3, lwd = 3)
arrows(povprečje_MCM2, 0, povprečje_MCM2 + st_odk_MCM2, 0, col = "green", lwd=2)
arrows(povprečje_MCM2, 0, povprečje_MCM2 - st_odk_MCM2, 0, col = "green", lwd=2)
legend("topright", c("Monte Carlo", "analiza modela"),col = c("green", "red"),
lwd = c(2,2), lty = c(1,3))
MCM3 <- MonteCarlo(S0, u, d, U, R, T, "put", N3, 100)
povprečje_MCM3 <- mean(MCM3)
st_odk_MCM3 <- sd(MCM3)
hist(MCM3, breaks = 20, xlim = c(0, 10),
main = "Monte Carlo : N = 1000", xlab = "Premija", ylab = "Frekvenca")
abline(v = povprečje_MCM3, col = "green", lwd = 3)
abline(v = binomski(S0, u, d, U, R, T, "put"), col = "red", lty = 3, lwd = 3)
arrows(povprečje_MCM3, 0, povprečje_MCM3 + st_odk_MCM3, 0, col = "green", lwd=2)
arrows(povprečje_MCM3, 0, povprečje_MCM3 - st_odk_MCM3, 0, col = "green", lwd=2)
legend("topright", c("Monte Carlo", "analiza modela"), col = c("green","red"),
lwd=c(2, 2),lty=c(1, 3))
source('~/FP_3.naloga/opcije.r', encoding = 'UTF-8')
